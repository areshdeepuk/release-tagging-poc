name: Deploy to QA

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  validate-status:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      release-status: ${{ env.release_success }}
    steps:
      - name: Download deploy status artifact
        run: |
          echo "Downloading release status artifact..."
          RELEASE_STATUS_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts" | \
          jq -r '.artifacts[] | select(.name == "release-status") | .archive_download_url')
          curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $RELEASE_STATUS_URL -o release-status.zip
          unzip release-status.zip -d release-status
      - name: Check artifact directories
        run: |
            ls -la release-status
            cat release-status/release-status.txt
      - name: Release status
        id: read-set-status
        run: |
          if grep -q true release-status/release-status.txt; then
            echo "release_success=true" >> $GITHUB_ENV
            echo "release_success: $env.release_success"
            echo "release_success: $release_success"
          else
            echo "release_success=false" >> $GITHUB_ENV
          fi          
      - name: Upload release status
        uses: actions/upload-artifact@v3
        with:
          name: release-status
          path: release-status.txt
  Deploy_QA:
    needs: validate-status
    runs-on: ubuntu-latest
    if: needs.validate-status.outputs.release-status == true
    steps:
      - name: Deployment step
        run: echo "Deploying to qa..."
      - name: Health check
        run: echo "Health check for QA..."
  Promote:
    needs: Deploy_QA
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get Short Git_SHA
        id: git_sha
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"
        shell: bash

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
      - name: Pull the existing Docker image
        run: |
          docker pull ${{ secrets.DOCKER_REGISTRY_URL }}:qa_demoapp_${{ steps.git_sha.outputs.sha }}
        
      - name: Retag the Docker image
        run: |
          docker tag ${{ secrets.DOCKER_REGISTRY_URL }}:qa_demoapp_${{ steps.git_sha.outputs.sha }} ${{ secrets.DOCKER_REGISTRY_URL }}:sit_demoapp_${{ steps.git_sha.outputs.sha }}
        
      - name: Push the retagged Docker image
        run: |
          docker push ${{ secrets.DOCKER_REGISTRY_URL }}:sit_demoapp_${{ steps.git_sha.outputs.sha }}

